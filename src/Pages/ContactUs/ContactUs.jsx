

import React, { useState } from 'react';
import {
  Phone,
  Mail,
  MapPin,
  Clock,
  Send,
  Truck,
  Users,
  MessageCircle,
} from 'lucide-react';
import PageHero from '../../components/helpingComp/PageHero';
import { useInView } from '../../shared/hooks/UseInView';


const initialFormState= {
  firstName: '',
  lastName: '',
  email: '',
  phone: '',
  company: '',
  message: '',
};

const Input = ({
  label,
  name,
  type = 'text',
  required = false,
  value,
  placeholder,
  onChange,
}) => (
  <div className="space-y-2">
    <label htmlFor={name} className="block text-sm font-medium text-gray-700">
      {label} {required && '*'}
    </label>
    <input
      id={name}
      name={name}
      type={type}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
    //   required={required}
      className="flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
    />
  </div>
);

const ContactUs = () => {
  const [formRef, isFormInView] = useInView({ threshold: 0.1 })
  const [infoRef, isInfoInView] = useInView({ threshold: 0.1 })
  const [formData, setFormData] = useState(initialFormState);

  const handleInputChange = (
    e
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
  e.preventDefault();

  emailjs
    .send(
      import.meta.env.VITE_EMAILJS_SERVICE_ID,
      import.meta.env.VITE_EMAILJS_TEMPLATE_ID,
      {
        from_name: `${formData.firstName}`,
        email: formData.email,
        phone: formData.phone,
        company: formData.company,
        message: formData.message,
      },
      import.meta.env.VITE_EMAILJS_PUBLIC_KEY
    )
    .then(
      () => {
        alert("‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‚úÖ");
        setFormData(initialFormState);
      },
      (error) => {
        console.error("Email send error:", error);
        alert("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø ‚ùå");
      }
    );
};

  // page hero
  const breadcrumbs = [
    { label: "Home", href: "/" },
    { label: "‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó" }, 
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-white">
      {/*  Header */}
      <PageHero title={"‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó"} breadcrumbs={breadcrumbs}/>
      {/* ‚úÖ Main Section */}
      <main className="container mx-auto px-4 py-16 grid lg:grid-cols-2 gap-12">
        {/* üîπ Contact Info */}
        <section ref={infoRef} className="space-y-8">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
          <p className="text-gray-600 text-sm">
            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§
          </p>
          </div>

          {/* Cards */}
          {[
            {
              icon: <Phone className="h-6 w-6 text-blue-600" />,
              label: '‡¶´‡ßã‡¶®',
              details: ['09666-700722', '+880 1627-355382'],
              bg: 'bg-blue-100',
            },
            {
              icon: <Mail className="h-6 w-6 text-green-600" />,
              label: '‡¶á‡¶Æ‡ßá‡¶á‡¶≤',
              details: ['support@tramessy.com', 'info@tramessy.com'],
              bg: 'bg-green-100',
            },
            {
              icon: <MapPin className="h-6 w-6 text-purple-600" />,
              label: '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ',
              details: ['‡¶π‡¶æ‡¶â‡¶∏-‡ßß‡ßÆ (‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶´‡ßç‡¶≤‡ßã‡¶∞), ‡¶∞‡ßã‡¶°-‡ß©, ‡¶®‡¶ø‡¶ï‡ßÅ‡¶û‡ßç‡¶ú-‡ß®, ‡¶ñ‡¶ø‡¶≤‡¶ï‡ßç‡¶∑‡ßá‡¶§, ‡¶¢‡¶æ‡¶ï‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂'],
              bg: 'bg-purple-100',
            },
            {
              icon: <Clock className="h-6 w-6 text-orange-600" />,
              label: '‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø',
              details: [
                '‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞ - ‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞: ‡ßØ:‡ß¶‡ß¶ - ‡ßß‡ßÆ:‡ß©‡ß¶',
                '‡ß®‡ß™/‡ß≠ ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
              ],
              bg: 'bg-orange-100',
            },
          ].map((info, idx) => (
            <div
              key={idx}
              className={`flex items-start space-x-4 p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow ${isInfoInView ? "animate-fade-in-left" : "opacity-0"}`}
              style={{ animationDelay: isInfoInView ? "0.2s" : "0s" }}
            >
              <div className={`${info.bg} p-3 rounded-full`}>{info.icon}</div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-1">{info.label}</h3>
                {info.details.map((line, i) => (
                  <p key={i} className="text-gray-600">
                    {line}
                  </p>
                ))}
              </div>
            </div>
          ))}

          {/* Quick Stats */}
          {/* <div className="grid grid-cols-2 gap-6 pt-6">
            {[
              {
                icon: <Truck className="h-8 w-8 mx-auto mb-2" />,
                label: '‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï',
                value: '‡ßß‡ß¶‡ß¶‡ß¶+',
                color: 'from-blue-500 to-blue-600',
              },
              {
                icon: <Users className="h-8 w-8 mx-auto mb-2" />,
                label: '‡¶ó‡¶æ‡¶°‡¶º‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá',
                value: '‡ß´‡ß¶‡ß¶‡ß¶+',
                color: 'from-green-500 to-green-600',
              },
            ].map((stat, i) => (
              <div
                key={i}
                className={`text-center p-6 bg-gradient-to-r ${stat.color} text-white rounded-xl`}
              >
                {stat.icon}
                <div className="text-2xl font-bold">{stat.value}</div>
                <div className="text-sm">{stat.label}</div>
              </div>
            ))}
          </div> */}
        </section>

        {/* üîπ Contact Form */}
        <section ref={formRef} className={`bg-white rounded-2xl shadow-2xl p-8 ${isFormInView ? "animate-fade-in-left" : "opacity-0"}`}>
          <div className="text-center mb-8">
            <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
              <MessageCircle className="h-8 w-8 text-blue-600" />
            </div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">
              ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            </h3>
            <p className="text-gray-600 text-xs">
              ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨
            </p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Name Row */}
            <div className="">
              <Input
                label="‡¶®‡¶æ‡¶Æ"
                name="firstName"
                required
                value={formData.firstName}
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                onChange={handleInputChange}
              />
            </div>

            {/* Email + Phone */}
            <Input
              label="‡¶á‡¶Æ‡ßá‡¶á‡¶≤"
              name="email"
              type="email"
              required
              value={formData.email}
              placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ"
              onChange={handleInputChange}
            />

            <Input
              label="‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"
              name="phone"
              type="tel"
              required
              value={formData.phone}
              placeholder="+‡ßÆ‡ßÆ‡ß¶ ‡ßß‡ß≠XX XXXXXX"
              onChange={handleInputChange}
            />

            {/* Company + Subject */}
            <Input
              label="‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
              name="company"
              value={formData.company}
              placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
              onChange={handleInputChange}
            />

            {/* Message */}
            <div className="space-y-2">
              <label
                htmlFor="message"
                className="block text-sm font-medium text-gray-700"
              >
                ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ *
              </label>
              <textarea
                id="message"
                name="message"
                required
                rows={5}
                value={formData.message}
                onChange={handleInputChange}
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                className="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Submit */}
            <button
              type="submit"
              className="w-full bg-gradient-to-r from-primary to-teal-600 hover:from-primary hover:to-primary/40 text-white font-semibold py-3 px-6 rounded-lg transition-transform transform hover:scale-[1.02] flex items-center justify-center"
            >
              <Send className="mr-2 h-5 w-5" />
              ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
            </button>
          </form>

          <div className="mt-6 text-center text-sm text-gray-500">
            ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡¶ø
          </div>
        </section>
      </main>
    </div>
  );
};

export default ContactUs;
